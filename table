DROP table if exists NS_WorksInsurance cascade;
DROP table if exists NS_Themes cascade;
DROP table if exists NS_SponsorExhibitions cascade;
DROP table if exists NS_WorkTransaction cascade;
DROP table if exists NS_ExhibitionLocations cascade;
DROP table if exists NS_ExhibitionWorks cascade;
DROP table if exists NS_WorkOwners cascade;
DROP table if exists NS_WorksMedium cascade;
DROP table if exists NS_Works cascade;
DROP table if exists NS_Owners cascade;
DROP table if exists NS_Locations cascade;
DROP table if exists NS_Exhibitions cascade;
DROP table if exists NS_Doors cascade;
DROP table if exists NS_WorkLocations cascade;


--Need to create a simple data attribute for phone numbers. If you don’t have them, don’t worry!
--CREATE DOMAIN NS_PhoneNumber as varchar(13);
--ALTER TABLE ns_owners add column ownphonenumber NS_PhoneNumber;


CREATE TABLE NS_Owners (
        ownName NS_OwnerName NOT NULL,
        ownEmail NS_OwnerEmail,
        ownCity NS_OwnerCity,
        ownState NS_OwnerState,
        ownStreetName NS_OwnerStreetName,
        ownBuildingNumber NS_OwnerBuildingNumber,
        ownisPartnerMuseum NS_IsPartnerMuseum NOT NULL,
        PRIMARY KEY(ownName)
);




CREATE TABLE NS_Works (
    worWorkCharID NS_WorkCharID NOT NULL,
    worWorkNumID NS_WorkNumID NOT NULL,
    worDatabaseEntryMuseum NS_OwnerName NOT NULL,
    worWorkName NS_WorkName,
    worWorkDescription NS_WorkDescription,
    worWorkPhysicalProperty NS_WorkPhysicalProperty,
    worWorkClassification NS_WorkClassification,
    worWorkCreator NS_WorkCreator,
    worWorkCreationDate NS_WorkCreationDate,
    worWorkBorrowable NS_WorkBorrowable NOT NULL,        
    worWorkGeographicRegionOfOrigin NS_GeographicRegionOfOrigin,
    worWorkCountryOfOrigin NS_CountryOfOrigin,
    worWorkFieldOfScience NS_FieldOfScience,     --coordinate name
    PRIMARY KEY(worWorkCharID, worWorkNumID, worDatabaseEntryMuseum),
    FOREIGN KEY(worDatabaseEntryMuseum) REFERENCES NS_Owners(ownName) ON UPDATE CASCADE
);




CREATE TABLE NS_WorksMedium (
    wmeWorkCharID NS_WorkCharID NOT NULL,        
    wmeWorkNumID NS_WorkNumID NOT NULL,
    wmeDatabaseEntryMuseum NS_OwnerName NOT NULL,  
    wmeWorkMedium NS_WorkMedium NOT NULL,
    PRIMARY KEY(wmeWorkCharID, wmeWorkNumID, wmeDatabaseEntryMuseum, wmeWorkMedium),
    FOREIGN KEY(wmeWorkCharID, wmeWorkNumID, wmeDatabaseEntryMuseum) REFERENCES NS_Works(worWorkCharID, worWorkNumID, worDatabaseEntryMuseum) ON UPDATE CASCADE
);


--Call locBuildingName locOwnerName (building name too vague)
CREATE TABLE NS_Locations (
    locLocationName NS_LocationName,    --was RoomName but could be towns
    locBuildingName NS_OwnerName,    --will have to be owner name and the name building name should change
    locIsTravellingExhibitionLocation NS_IsTravellingExhibitionLocation,
    locLocationSuggestedCapacityMin NS_LocationSuggestedCapacity,
    locLocationSuggestedCapacityMax NS_LocationSuggestedCapacity,
    locLocationMeasurementWidth NS_LocationMeasurement,
    locLocationMeasurementLength NS_LocationMeasurement,
    FOREIGN KEY(locBuildingName) REFERENCES NS_Owners(ownName),
    PRIMARY KEY(locLocationName, locBuildingName),
CHECK(locLocationSuggestedCapacityMin < locLocationSuggestedCapacityMax)
);




CREATE TABLE NS_WorkLocations (
    wolWorkCharID NS_WorkCharID NOT NULL,
    wolWorkNumID NS_WorkNumID NOT NULL,
    wolWorkDatabaseEntryMuseum NS_OwnerName NOT NULL,
    wolLocationName NS_LocationName NOT NULL,
    wolMuseumName NS_OwnerName NOT NULL,
    wolWorkTimeArrival NS_WorkTime NOT NULL,
    wolWorkTimeDeparture NS_WorkTime,
    Foreign Key (wolWorkCharID, wolWorkNumID, wolWorkDatabaseEntryMuseum) REFERENCES NS_Works(worWorkCharID, worWorkNumID, worDatabaseEntryMuseum),
    Foreign Key (wolLocationName, wolMuseumName) REFERENCES NS_Locations(locLocationName, locBuildingName),
    PRIMARY KEY(wol_WorkCharID, wol_WorkNumID, wol_WorkDatabaseEntryMuseum, wol_LocationName, wol_MuseumName,wol_WorkTimeArrival),
CHECK ((wolWorkTimeArrival<=wolWorkTimeDeparture) OR (wolWorkTimeDeparture is NULL))
);




CREATE TABLE NS_Doors (
    dorMuseumNameOrigin NS_OwnerName NOT NULL,
    dorLocationNameOrigin NS_LocationName NOT NULL,
    dorMuseumNameDestination NS_OwnerName NOT NULL,    
    dorLocationNameDestination NS_LocationName NOT NULL,
    FOREIGN KEY(dorMuseumNameOrigin, dorLocationNameOrigin) REFERENCES NS_Locations(locBuildingName, locLocationName),
    FOREIGN KEY(dorMuseumNameDestination, dorLocationNameDestination) REFERENCES NS_Locations(locBuildingName, locLocationName),
    PRIMARY KEY(dorMuseumNameOrigin, dorLocationNameOrigin, dorMuseumNameDestination,dorLocationNameDestination)
);


--Missing Descriptions!!!
CREATE TABLE NS_Exhibitions (
    exhExhibitName NS_ExhibitName NOT NULL,
    exhMuseumName NS_OwnerName NOT NULL,
    exhExhibitDateStart NS_ExhibitDate NOT NULL,
    exhExhibitDateEnd NS_ExhibitDate NOT NULL,
exhExhibitDescription NS_ExhibitDescription,  -- Added description
exhSecurityPersonName NS_SecurityName,
    exhIsTravellingExhibition NS_IsTravellingExhibition,
    PRIMARY KEY(exhExhibitName, exhMuseumName, exhExhibitDateStart),
    FOREIGN KEY(exhMuseumName) REFERENCES NS_Owners(OwnName),
CHECK( exhExhibitDateStart<exhExhibitDateEnd)
);




CREATE TABLE NS_ExhibitionLocations (
    eloExhibitName NS_ExhibitName NOT NULL,
    eloExhibitDateStart NS_ExhibitDate NOT NULL,
    eloLocationName NS_LocationName NOT NULL,
    eloMuseumOfLocation NS_OwnerName NOT NULL,
    eloMuseumOfExhibition NS_OwnerName NOT NULL,
    eloLocationDateStart NS_LocationDate NOT NULL,
    eloLocationDateEnd NS_LocationDate,
    PRIMARY KEY(eloExhibitName, eloExhibitDateStart, eloLocationName, eloMuseumOfLocation, eloLocationDateStart),
    FOREIGN KEY(eloExhibitname, eloExhibitDateStart,eloMuseumOfExhibition) REFERENCES NS_Exhibitions(exhExhibitName, exhExhibitDateStart, exhMuseumName),
    FOREIGN KEY(eloLocationName, eloMuseumOfLocation) REFERENCES NS_Locations(locLocationName, locBuildingName),
        CHECK(((eloLocationDateEnd is NULL) OR (eloLocationDateStart<eloLocationDateEnd))
                AND (eloExhibitDateStart<=eloLocationDateStart))
);


CREATE TABLE NS_ExhibitionWorks (
    exwExhibitName NS_ExhibitName NOT NULL,
    exwExhibitDateStart NS_ExhibitDate NOT NULL,
    exwMuseumOfExhibition NS_OwnerName NOT NULL,
    exwWorkCharID NS_WorkCharID NOT NULL,
    exwWorkNumID NS_WorkNumID NOT NULL,
    exwWorkDataBaseEntryMuseum NS_OwnerName NOT NULL,
    exwDateWorkAdded NS_DateWorkAdded NOT NULL,
    exwDateWorkRemoved NS_DateWorkRemoved,
    PRIMARY KEY(exwExhibitname, exwExhibitDateStart, exwMuseumOfExhibition, exwWorkCharID, exwWorkNumID, exwWorkDataBaseEntryMuseum, exwDateWorkAdded),
    FOREIGN KEY(exwExhibitName, exwExhibitDateStart,exwMuseumOfExhibition) REFERENCES NS_Exhibitions(exhExhibitName,exhExhibitDateStart, exhMuseumName),
    FOREIGN KEY(exwWorkCharID, exwWorkNumID, exwWorkDatabaseEntryMuseum) REFERENCES NS_Works(worWorkCharID, worWorkNumID, worDatabaseEntryMuseum),
        CHECK((exwDateWorkAdded<exwDateWorkRemoved) OR (exwDateWorkRemoved is NULL))
);


--Change EntryLocation to EntryMuseum?
CREATE TABLE NS_WorkOwners (
    wonWorkCharID NS_WorkCharID NOT NULL,
    wonWorkNumID NS_WorkNumID NOT NULL,
    wonWorkDatabaseEntryLocation NS_OwnerName NOT NULL,
    wonOwnerName NS_OwnerName NOT NULL,
    wonOwnershipDateStart NS_OwnershipDate NOT NULL,
    wonOwnershipDateEnd NS_OwnershipDate,
    PRIMARY KEY(wonWorkCharID, wonWorkNumId, wonworkDatabaseEntryLocation, wonOwnerName, wonOwnershipDateStart),
    FOREIGN KEY(wonWorkCharID, wonWorkNumID, wonWorkDatabaseEntryLocation) REFERENCES NS_Works(worWorkCharID, worWorkNumID, worDatabaseEntryMuseum),
    FOREIGN KEY(wonOwnerName) REFERENCES NS_Owners(ownName),
        CHECK((wonOwnershipDateStart<wonOwnershipDateEnd) OR (wonOwnershipDateEnd is NULL))
);






CREATE TABLE NS_WorkTransaction (
    wtrWorkCharID NS_WorkCharID NOT NULL,
    wtrWorkNumID NS_WorkNumID NOT NULL,
    wtrWorkDatabaseEntryMuseum NS_OwnerName NOT NULL,
    wtrMuseumInvolved NS_OwnerName NOT NULL,
    wtrClient NS_OwnerName,
    wtrTransactiontype NS_TransactionType NOT NULL,
    wtrTransactionTime NS_TransactionTime NOT NULL,
    PRIMARY KEY(wtrWorkCharID, wtrWorkNumID, wtrWorkDatabaseEntryMuseum, wtrMuseumInvolved, wtrTransactionType, wtrTransactionTime),
    FOREIGN KEY(wtrWorkCharID, wtrWorkNumID, wtrWorkDatabaseEntryMuseum) REFERENCES NS_Works(worWorkCharID, worWorkNumID, worDatabaseEntryMuseum),
    FOREIGN KEY(wtrWorkDatabaseEntryMuseum) REFERENCES NS_Owners(ownName),
    FOREIGN KEY(wtrClient) REFERENCES NS_Owners(ownName)
);




CREATE TABLE NS_SponsorExhibitions (
    speSponsorName NS_SponsorName NOT NULL,
    speExhibitName NS_ExhibitName NOT NULL,
    speMuseumName NS_OwnerName NOT NULL,
    speExhibitDateStart NS_ExhibitDate NOT NULL,
    speSponsorAmount NS_SponsorAmount,
    PRIMARY KEY(speSponsorName, speExhibitName, speMuseumName, speExhibitDateStart),
    FOREIGN KEY(speExhibitName, speMuseumName, speExhibitDateStart) REFERENCES NS_Exhibitions(exhExhibitName, exhMuseumName, exhExhibitDateStart)
);


--Change EntryLocation to EntryMuseum
CREATE TABLE NS_Themes (
    wthWorkCharID NS_WorkCharID NOT NULL,
    wthWorkNumID NS_WorkNumID NOT NULL,
    wthWorkDatabaseEntryLocation NS_OwnerName NOT NULL,
    wthTheme NS_Theme NOT NULL,
    PRIMARY KEY(wthWorkCharID, wthWorkNumID, wthWorkDatabaseEntryLocation, wthTheme),
    FOREIGN KEY(wthWorkCharID, wthWorkNumID, wthWorkDatabaseEntryLocation) REFERENCES NS_Works(worWorkCharID, worWorkNumID, worDatabaseEntryMuseum)
);


--Change EntryLocation to EntryMuseum?
CREATE TABLE NS_WorksInsurance (
    winWorkCharID NS_WorkCharID NOT NULL,
    winWorkNumID NS_WorkNumID NOT NULL,
    winWorkDatabaseEntryLocation NS_OwnerName NOT NULL,
    winWorkInsureValue NS_WorkInsureValue NOT NULL,
    winInsureDateStart NS_InsureDate NOT NULL,
    winInsureDateEnd NS_InsureDate,
    PRIMARY KEY(winWorkCharID, winWorkNumID, winWorkDatabaseEntryLocation, winInsureDateStart),
    FOREIGN KEY(winWorkCharID, winWorkNumID, winWorkDatabaseEntryLocation) REFERENCES NS_Works(worWorkCharID, worWorkNumID, worDatabaseEntryMuseum),
CHECK((winInsureDateStart< winInsureDateEnd) OR (winInsureDateEnd is NULL))
);




--We can add this at merge time
--RoomCondition
--Table
